{"version":3,"sources":["actions/prizeAction.js","components/summary-box/ManagementButtons.jsx","utils/mathUtils.js","utils/gameUtils.js","components/summary-box/DrawCard.jsx","components/summary-box/SummaryBox.jsx","components/game-box/GameBoxHeader.jsx","components/game-box/SingleCardBox.jsx","components/game-box/GameBox.jsx","components/game-settings/AutomaticDrawSwitch.jsx","components/game-settings/CheckboxPrizesList.jsx","components/game-settings/GameSettings.jsx","components/game-settings/InitialGameSettingsModal.jsx","components/game-settings/InGameSettingsModal.jsx","components/TombolaGame.jsx","components/Footer.jsx","App.js","serviceWorker.js","reducers/managePrizesSettings.js","reducers/manageDrewNumbers.js","reducers/undoRedoManagement.js","reducers/index.js","i18n.js","index.js"],"names":["addDrewNumber","drewNumber","type","ManagementButtons","dispatch","useDispatch","t","useTranslation","canUndo","useSelector","state","undoRedoManagement","past","length","canRedo","future","className","data-toggle","title","onClick","UndoActionCreators","undo","disabled","size","color","redo","mathUtils","rangeRightEdgeExcluded","min","max","Array","map","_","i","range","from","chunkArray","array","chunk_size","results","c","push","splice","randomNumber","Math","floor","random","gameUtils","getNumbers","objectsList","filter","object","isNaN","getNotNumbers","getCheckedPrizes","prizes","prize","checked","StyledButton","styled","div","SummaryBoxDrawFooter","drewNumbers","present","automaticDraw","managePrizesSettings","availableNumbers","manageDrewNumbers","handleAutomaticDrawClick","el","includes","style","pointerEvents","DrawCard","useState","loadingNumber","presentNumber","SummaryBox","GameBoxHeader","checkedPrizes","assignedPrizes","availablePrizes","nextPrize","reduce","prev","curr","id","canAward","emptyPrizesList","letterSpacing","name","assignedPrize","SingleItems","key","chArray","item","value","fontSize","fontWeight","SingleCardBox","box","GameBox","initialNumbers","gameNumber","useEffect","numbers","AutomaticDrawSwitch","onChange","defaultChecked","htmlFor","CheckboxPrizesList","handleCheckChange","event","parseInt","target","list","GameSettings","InitialGameSettingsModal","showSettingsModal","setShowSettingsModal","Modal","show","backdrop","centered","Header","Title","Body","Footer","InGameSettingsModal","showInGameSettings","window","location","reload","TombolaGame","href","rel","Loader","role","App","fallback","basename","process","Boolean","hostname","match","initialState","action","newPrizes","p","drewPrize","undoableDrewNumbers","undoable","undefined","tombolaApp","combineReducers","i18n","use","I18NextXhrBackend","I18nextBrowserLanguageDetector","initReactI18next","init","fallbackLng","debug","interpolation","escapeValue","ns","defaultNS","backend","loadPath","composeEnhancers","composeWithDevTools","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cdea6586.chunk.js","sourcesContent":["export const changePrizeActivation = (id) => {\n    return {\n        type: \"CHANGE_PRIZE_ACTIVATION\",\n        id\n    }\n};\n\nexport const changeAutomaticDrawState = () => {\n    return {\n        type: \"CHANGE_AUTOMATIC_DRAW_STATE\"\n    }\n};\n\nexport const addInitialNumbers = (numbers) => {\n    return {\n        type: \"ADD_INITIAL_NUMBERS\",\n        numbers\n    }\n};\n\nexport const addDrewNumber = (drewNumber) => {\n    return{\n        type: \"ADD_DREW_NUMBER\",\n        drewNumber\n    }\n};\n\nexport const addAssignedPrize = (assignedPrize) => {\n    return {\n        type: \"ADD_ASSIGNED_PRIZE\",\n        assignedPrize\n    }\n}\n\nexport const switchInGameSettings = () => {\n    return{\n        type: \"SWITCH_IN_GAME_SETTINGS\"\n    }\n};\n\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActionCreators as UndoActionCreators } from \"redux-undo\";\nimport { RotateCcw, RotateCw, Settings } from \"react-feather\";\nimport { useTranslation } from \"react-i18next\";\nimport { switchInGameSettings } from \"../../actions/prizeAction\";\n\n/**\n * This component contains the buttons to manage the entire game.\n */\nconst ManagementButtons = () => {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n\n  const canUndo =\n    useSelector(state => state.undoRedoManagement.past.length) > 0;\n  const canRedo =\n    useSelector(state => state.undoRedoManagement.future.length) > 0;\n\n  /**\n   * The UNDO button to manage the draw.\n   */\n  const UndoButton = () => {\n    const handleUndoClick = () => {\n      dispatch(UndoActionCreators.undo());\n    };\n    return (\n      <button\n        className=\"btn btn-sm btn-warning mx-1 my-1\"\n        data-toggle=\"back-arrow\"\n        title={t(\"game-page.go-back\")}\n        onClick={() => handleUndoClick()}\n        disabled={!canUndo}\n      >\n        <RotateCcw size=\"20\" color=\"white\" />\n      </button>\n    );\n  };\n\n  /**\n   * The REDO button to manage the draw.\n   */\n  const RedoButton = () => {\n    const handleRedoClick = () => {\n      dispatch(UndoActionCreators.redo());\n    };\n\n    return (\n      <button\n        className=\"btn btn-sm btn-warning mx-1 my-1\"\n        data-toggle=\"forth-arrow\"\n        title={t(\"game-page.go-forth\")}\n        onClick={() => handleRedoClick()}\n        disabled={!canRedo}\n      >\n        <RotateCw size=\"20\" color=\"white\" />\n      </button>\n    );\n  };\n\n  /**\n   * The setting button to manage prizes and automatic draw.\n   */\n  const SettingButton = () => {\n    const handleSettingsClick = () => {\n      dispatch(switchInGameSettings());\n    };\n    return (\n      <button className=\"btn btn-danger mx-1 my-1\"\n        data-toggle=\"settings-button\"\n        title={t(\"generics.settings\")}\n      >\n        <Settings\n          size=\"20\"\n          color=\"white\"\n          onClick={() => handleSettingsClick()}\n\n        />\n      </button>\n    );\n  };\n\n  return (\n    <div className=\"card border-0\">\n      <div className=\"card-body\">\n        <div className=\"container\">\n          <div className=\"row justify-content-between\">\n            <div className=\"btn-group d-flex \">\n              <UndoButton />\n              <RedoButton />\n            </div>\n            <SettingButton />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ManagementButtons;\n","const mathUtils = {\n  // create an array of numbers between min and max (right edge excluded)\n  rangeRightEdgeExcluded: (min, max) =>\n    [...Array(max - min)].map((_, i) => i + min),\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\n\n  chunkArray: (array, chunk_size) => {\n    let results = [];\n    let c = [...array];\n    while (c.length) {\n      results.push(c.splice(0, chunk_size));\n    }\n    //console.log(results);\n    return results;\n  },\n\n  randomNumber: (array) => {\n      return array[Math.floor(Math.random() * array.length)];\n  }\n};\n\nexport default mathUtils;","const gameUtils = {\n  getNumbers: objectsList => objectsList.filter(object => !isNaN(object)),\n  getNotNumbers: objectsList => objectsList.filter(object => isNaN(object)),\n  getCheckedPrizes: prizes => prizes.filter(prize => prize.checked)\n};\n\nexport default gameUtils;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addDrewNumber } from \"../../actions/prizeAction\";\nimport mathUtils from \"../../utils/mathUtils\";\nimport { useTranslation } from \"react-i18next\";\nimport gameUtils from \"../../utils/gameUtils\";\n\n/**\n * The last drew number div style.\n */\nconst StyledButton = styled.div`\n  pointer-events: none;\n  position: relative;\n  width: calc(50% * (9/16));\n  padding-bottom: calc(50% * (9/16));\n  \n  border-radius: 50%;\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n\n  div {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    font-size: calc(5em *(9/16));\n    transform: translate(-50%, -50%);\n  }\n`;\n\nconst SummaryBoxDrawFooter = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const drewNumbers = useSelector(state =>\n    gameUtils.getNumbers(state.undoRedoManagement.present)\n  );\n  const automaticDraw = useSelector(\n    state => state.managePrizesSettings.automaticDraw\n  );\n  const availableNumbers = useSelector(\n    state => state.manageDrewNumbers.availableNumbers\n  );\n\n  const drawableNumbers = () => {\n    return availableNumbers.filter(el => !drewNumbers.includes(el));\n  };\n\n  /**\n   * This function handle the automatic draw button.\n   */\n  const handleAutomaticDrawClick = () => {\n    let drewNumber = mathUtils.randomNumber(drawableNumbers());\n    dispatch(addDrewNumber(drewNumber));\n    // SET FUNCTION WITH TIMEOUT <- loading number: false\n  };\n\n  return (\n    <button\n      className={`btn btn-success ${automaticDraw ? \"\" : \"disabled\"}`}\n      style={{ pointerEvents: automaticDraw ? \"\" : \"none\" }}\n      onClick={() => handleAutomaticDrawClick()}\n    >\n      {t(\"generics.draw\")}\n    </button>\n  );\n};\n\nconst DrawCard = () => {\n  const { t } = useTranslation();\n  const [loadingNumber] = useState(false);\n  const drewNumbers = useSelector(state =>\n    gameUtils.getNumbers(state.undoRedoManagement.present)\n  );\n  const presentNumber = drewNumbers[drewNumbers.length - 1];\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <div className=\"row justify-content-center text-center\">\n          <h3>{t(\"game-page.last-draw-number\")}</h3>\n        </div>\n        <div className=\"row justify-content-center\">\n          <StyledButton className=\"my-4\">\n            {loadingNumber ? (\n              \"INSERT HTML CODE SPINNER\"\n            ) : (\n              <div>{presentNumber == null ? \"#\" : presentNumber}</div>\n            )}\n          </StyledButton>\n        </div>\n      </div>\n      <div className=\"card-footer border-0 d-flex flex-wrap justify-content-center\">\n        <SummaryBoxDrawFooter />\n      </div>\n    </div>\n  );\n};\n\nexport default DrawCard;\n","import React from \"react\";\nimport ManagementButtons from \"./ManagementButtons\";\nimport DrawCard from \"./DrawCard\";\n\n/**\n * The main components contains the summary information of the game and the management buttons.\n */\nconst SummaryBox = () => {\n  return (\n    <div className=\"card border-0\">\n      <div className=\"card-body\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <DrawCard />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col\">\n              <ManagementButtons />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SummaryBox;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport gameUtils from \"../../utils/gameUtils\";\nimport { addAssignedPrize } from \"../../actions/prizeAction\";\nimport { useTranslation } from \"react-i18next\";\n\n/**\n * The game box header contains the prizes information.\n */\nconst GameBoxHeader = () => {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n\n  const checkedPrizes = useSelector(state =>\n    gameUtils.getCheckedPrizes(state.managePrizesSettings.prizes)\n  );\n\n  const assignedPrizes = useSelector(state =>\n    gameUtils.getNotNumbers(state.undoRedoManagement.present)\n  );\n\n  /**\n   * Filters the checked prizes in state.\n   */\n  const availablePrizes = checkedPrizes.filter(\n    prize => !assignedPrizes.includes(prize)\n  );\n\n  /**\n   * Finds the next prize to show in game.\n   */\n  const nextPrize = availablePrizes.reduce(\n    (prev, curr) => (prev.id < curr.id ? prev : curr),\n    0\n  );\n\n  /**\n   * Handles the award button click.\n   */\n  const handleAssignedPrizeClick = () => {\n    dispatch(addAssignedPrize(nextPrize));\n  };\n\n  /**\n   * Mandatory to prevent null award.\n   */\n  const canAward = availablePrizes.length > 1;\n\n  const emptyPrizesList = availablePrizes.length === 0;\n\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-between align-items-center\">\n        <ul className=\"list-inline\">\n          <li className=\"list-inline-item\">\n            <h5 className=\"align-center text-muted\">\n              {t(\"game-page.actual-prize\")}\n            </h5>\n          </li>\n          <li className=\"list-inline-item\">\n            <h2\n              className=\"align-center text-uppercase\"\n              style={{ letterSpacing: \"0.03em\" }}\n            >\n              {emptyPrizesList\n                ? t(`welcome-page.no-prize`)\n                : t(`welcome-page.prizes.${nextPrize.name}`)}\n            </h2>\n          </li>\n        </ul>\n\n        <button\n          className=\"btn btn-info\"\n          onClick={handleAssignedPrizeClick}\n          disabled={!canAward}\n        >\n          {t(\"generics.award\")}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default GameBoxHeader;","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport gameUtils from \"../../utils/gameUtils\";\nimport { addDrewNumber } from \"../../actions/prizeAction\";\nimport mathUtils from \"../../utils/mathUtils\";\n\n/**\n * This component builds the single button group.\n * @param {array} array\n */\nconst SingleItems = ({ array }) => {\n  const dispatch = useDispatch();\n\n  const drewNumbers = useSelector(state =>\n    gameUtils.getNumbers(state.undoRedoManagement.present)\n  );\n\n  const handleNumberClick = number => {\n    dispatch(addDrewNumber(number));\n  };\n  return (\n    <div key={array}>\n      {array.map(chArray => (\n        <div className=\"container-fluid\" key={`container-${chArray}`}>\n          <div className=\"row justify-content-between\" key={chArray}>\n            {chArray.map(item => (\n              <button\n                className={`btn btn-outline-warning col mx-1 my-1 ${\n                  drewNumbers.includes(item) ? \"active none\" : \"\"\n                }`}\n                key={item}\n                value={item}\n                onClick={() => handleNumberClick(item)}\n                style={{\n                  pointerEvents: drewNumbers.includes(item) ? \"none\" : \"\"\n                }}\n              >\n                <span\n                  style={{\n                    fontSize: \"calc(1.993em * (9/16))\",\n                    fontWeight: \"bold\"\n                  }}\n                >\n                  {item}\n                </span>\n              </button>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\n/**\n * This component build a single card contains the button group.\n * @param {array} array \n */\nconst SingleCardBox = ({ array }) => {\n  return (\n    <>\n      {array.map(box => (\n        <div className=\"col-md-6 my-2 col-12\" key={`box-${box}`}>\n          <div className=\"card border-0\" key={box}>\n            <SingleItems array={mathUtils.chunkArray(box, 5)} />\n          </div>\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default SingleCardBox;\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addInitialNumbers } from \"../../actions/prizeAction\";\nimport mathUtils from \"../../utils/mathUtils\";\nimport GameBoxHeader from \"./GameBoxHeader\";\nimport SingleCardBox from \"./SingleCardBox\";\n\n/**\n * The entire game box that contains the six little boxes.\n * @param {array} gameNumber Contains the generated number to show in game.\n */\nconst GameBox = () => {\n  const dispatch = useDispatch();\n\n  const initialNumbers = mathUtils.range(1, 90);\n  const gameNumber = mathUtils.chunkArray(initialNumbers, 15);\n\n  useEffect(() => {\n    dispatch(addInitialNumbers(initialNumbers));\n  });\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header border-0\">\n        <GameBoxHeader />\n      </div>\n      <div className=\"card-body\">\n        <div className=\"container-fluid\">\n          <div className=\"row my-3\">\n            <SingleCardBox array={gameNumber} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GameBox;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeAutomaticDrawState } from \"../../actions/prizeAction\";\nimport { useTranslation } from \"react-i18next\";\n\n/**\n * The switch component to manage the automatic draw state.\n */\nconst AutomaticDrawSwitch = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const automaticDraw = useSelector(\n    state => state.managePrizesSettings.automaticDraw\n  );\n\n  /**\n   * This method handle the status changing of the automatic draw switch component.\n   */\n  const handleSwitchChange = () => {\n    dispatch(changeAutomaticDrawState());\n  };\n\n  return (\n    <div className=\"custom-control custom-switch\">\n      <input\n        type=\"checkbox\"\n        className=\"custom-control-input\"\n        onChange={handleSwitchChange}\n        defaultChecked={automaticDraw}\n        id=\"automaticDrawSwitch\"\n      />\n      <label className=\"custom-control-label\" htmlFor=\"automaticDrawSwitch\">\n        {t(\"welcome-page.automatic-draw\")}\n      </label>\n    </div>\n  );\n};\n\nexport default AutomaticDrawSwitch;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport { changePrizeActivation } from \"../../actions/prizeAction\";\n\n/**\n * The checkbox list of tombola prizes.\n */\nconst CheckboxPrizesList = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const prizes = useSelector(state => state.managePrizesSettings.prizes);\n\n  /**\n   * This method handle changes from any checkbox in the list.\n   * @param {object} event\n   */\n  const handleCheckChange = event => {\n    dispatch(changePrizeActivation(parseInt(event.target.id)));\n  };\n\n  const list = prizes.map(prize => {\n    return (\n      <div\n        className=\"col-lg-2 col-md-4 col-sm-6 col-12\"\n        key={`col-${prize.id}`}\n      >\n        <div className=\"custom-control custom-checkbox custom-control-inline\">\n          <input\n            type=\"checkbox\"\n            className=\"custom-control-input\"\n            onChange={handleCheckChange}\n            checked={prize.checked}\n            id={prize.id}\n          />\n          <label htmlFor={prize.id} className=\"custom-control-label\">\n            {t(`welcome-page.prizes.${prize.name}`)}\n          </label>\n        </div>\n      </div>\n    );\n  });\n\n  return <>{list}</>;\n};\n\nexport default CheckboxPrizesList;\n","import React from \"react\";\nimport AutomaticDrawSwitch from \"./AutomaticDrawSwitch\";\nimport CheckboxPrizesList from \"./CheckboxPrizesList\";\nimport { useTranslation } from \"react-i18next\";\n\n/**\n * The game settings component, contains the prizes checkboxes and the automatic draw switch.\n */\nconst GameSettings = () => {\n  const { t } = useTranslation();\n\n  return (\n    <form>\n      <div className=\"form-group\">\n        <small className=\"form-check-label\">\n          {t(\"welcome-page.settings-checkbox-tip\")}\n        </small>\n        <div className=\"row\">\n          <CheckboxPrizesList />\n        </div>\n      </div>\n      <div className=\"form-group d-flex flex-wrap\">\n        <AutomaticDrawSwitch />\n      </div>\n    </form>\n  );\n};\n\nexport default GameSettings;\n","import React, { useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { useTranslation } from \"react-i18next\";\nimport GameSettings from \"./GameSettings\";\n\n/**\n * The initial modal to show to let user changing game settings.\n */\nconst InitialGameSettingsModal = () => {\n  const { t } = useTranslation();\n  const [showSettingsModal, setShowSettingsModal] = useState(true);\n\n  /**\n   * This function handle the onHide event of starting settings modal.\n   */\n  const handleFunctionOnHide = () => {\n    setShowSettingsModal(!showSettingsModal);\n  };\n\n  return (\n    <Modal show={showSettingsModal} backdrop={`static`} size=\"lg\" centered>\n      <Modal.Header>\n        <Modal.Title>{t(\"generics.welcome\")}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <GameSettings />\n      </Modal.Body>\n      <Modal.Footer>\n        <button className=\"btn btn-primary\" onClick={handleFunctionOnHide}>\n          {t(\"generics.start-the-game\")}\n        </button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default InitialGameSettingsModal;\n","import React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport GameSettings from \"./GameSettings\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { switchInGameSettings } from \"../../actions/prizeAction\";\n\n/**\n * The modal to show the in-game settings.\n */\nconst InGameSettingsModal = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const showInGameSettings = useSelector(\n    state => state.managePrizesSettings.showInGameSettings\n  );\n\n  const handleSaveClick = () => {\n    dispatch(switchInGameSettings());\n  };\n\n  const handleResetGameClick = () => {\n    window.location.reload();\n    return false;\n  }\n\n  return (\n    <Modal show={showInGameSettings} backdrop={`static`} size=\"lg\" centered>\n      <Modal.Header>\n        <Modal.Title>{t(\"generics.settings\")}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <GameSettings />\n      </Modal.Body>\n      <Modal.Footer>\n        <div className=\"container\">\n          <div className=\"row justify-content-between\">\n            <button className=\"btn btn-outline-danger\" onClick={handleResetGameClick}>{t(\"generics.reset\")}</button>\n            <button className=\"btn btn-primary\" onClick={handleSaveClick}>{t(\"generics.save\")}</button>\n          </div>\n        </div>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default InGameSettingsModal;\n","import SummaryBox from \"./summary-box/SummaryBox\";\nimport React from \"react\";\nimport GameBox from \"./game-box/GameBox\";\nimport InitialGameSettingsModal from \"./game-settings/InitialGameSettingsModal\";\nimport InGameSettingsModal from \"./game-settings/InGameSettingsModal\";\n\n/**\n * The main component of the game.\n */\nconst TombolaGame = () => {\n  return (\n    <div className=\"d-flex justify-content-center align-items-md-center\">\n      <div className=\"container-fluid\">\n        <div className=\"row my-2\">\n          <div className=\"col-xl-4 col-lg-4 col-12 order-lg-1\">\n            <SummaryBox />\n          </div>\n          <div className=\"col-xl-8 col-lg-8 col-12 order-lg-0\">\n            <GameBox />\n          </div>\n        </div>\n        <InitialGameSettingsModal />\n        <InGameSettingsModal />\n      </div>\n    </div>\n  );\n};\n\nexport default TombolaGame;\n","import React from \"react\";\nimport { FaReact, FaGithub } from \"react-icons/fa\";\n\n/**\n * The footer of the application\n */\nconst Footer = () => {\n  return (\n    <footer className=\"footer mt-auto py-3 bg-light text-white\">\n      <div className=\"container justify-content-between\">\n        <span className=\"text-muted\">\n          Made with{\" \"}\n          <a href=\"https://it.reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-decoration-none a\">\n            <FaReact />\n          </a>\n          .{\" \"}\n        </span>\n        <span className=\"text-muted\">\n          For other projects check my <FaGithub />{\" \"}\n          <a href=\"https://github.com/albertoforcato/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-decoration-none\">\n            GitHub\n          </a>\n          {\" \"}repo.\n        </span>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { Suspense } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport TombolaGame from \"./components/TombolaGame\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <Suspense fallback={<Loader />}>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <main role=\"main\" className=\"flex-shrink-0\">\n          <TombolaGame />\n        </main>\n        <Footer />\n      </BrowserRouter>\n    </Suspense>\n  );\n};\n\nconst Loader = () => (\n  <div className=\"container d-flex justify-content-center align-items-center\">\n    <div className=\"spinner-border text-primary\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n  prizes: [\n    { id: 1, name: \"ambo\", checked: true },\n    { id: 2, name: \"terno\", checked: true },\n    { id: 3, name: \"quaterna\", checked: true },\n    { id: 4, name: \"cinquina\", checked: true },\n    { id: 5, name: \"tombola\", checked: true },\n    { id: 6, name: \"tombolino\", checked: true }\n  ],\n  automaticDraw: false,\n  showInGameSettings: false\n};\n\nconst managePrizesSettings = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHANGE_PRIZE_ACTIVATION\": {\n      let newPrizes = state.prizes.map(p => {\n        if (p.id === action.id) {\n          p.checked = !p.checked;\n        }\n        return p;\n      });\n\n      return {\n        ...state,\n        prizes: newPrizes\n      };\n    }\n    case \"CHANGE_AUTOMATIC_DRAW_STATE\": {\n      return {\n        ...state,\n        automaticDraw: !state.automaticDraw\n      };\n    }\n    case \"SWITCH_IN_GAME_SETTINGS\":{\n      return{\n        ...state,\n        showInGameSettings: !state.showInGameSettings\n      };\n    } \n    default: {\n      return { ...state };\n    }\n  }\n};\n\nexport default managePrizesSettings;\n","const initialState = {\n  availableNumbers: null\n};\nconst manageDrewNumbers = (state = initialState, action) => {\n  switch (action.type) {\n    case \"ADD_INITIAL_NUMBERS\": {\n      //console.log(action.numbers);\n      return {\n        ...state,\n        availableNumbers: action.numbers\n      };\n    }\n    case \"REMOVE_DREW_NUMBERS\": {\n        //console.log(action.numbers);\n        let numbers = null\n        return{\n            ...state,\n            availableNumbers: numbers\n        }\n    }\n    default:\n      return { ...state };\n  }\n};\n\nexport default manageDrewNumbers;","import undoable from \"redux-undo\";\n\nconst initialState = [];\n\nconst drewNumber = (state, action) => {\n  switch (action.type) {\n    case \"ADD_DREW_NUMBER\":\n      return action.drewNumber;\n\n    default:\n      return state;\n  }\n};\n\nconst drewPrize = (state, action) => {\n  switch (action.type) {\n    case \"ADD_ASSIGNED_PRIZE\":\n      //console.log(\"ASSIGNED_PRIZE\", action.assignedPrize);\n      return action.assignedPrize;\n    default:\n      return state;\n  }\n};\n\nconst undoRedoManagement = (state = initialState, action) => {\n  switch (action.type) {\n    case \"ADD_DREW_NUMBER\": {\n      return [...state, drewNumber(undefined, action)];\n    }\n    case \"ADD_ASSIGNED_PRIZE\": {\n      return [...state, drewPrize(undefined, action)];\n    }\n    default:\n      return state;\n  }\n};\n\nconst undoableDrewNumbers = undoable(undoRedoManagement);\n\nexport default undoableDrewNumbers;\n","import { combineReducers } from \"redux\";\nimport managePrizesSettings from \"./managePrizesSettings\";\nimport manageDrewNumbers from \"./manageDrewNumbers\";\nimport undoRedoManagement from \"./undoRedoManagement\";\n\nconst tombolaApp = combineReducers({\n  undoRedoManagement,\n  managePrizesSettings,\n  manageDrewNumbers\n});\n\nexport default tombolaApp;\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport I18nextBrowserLanguageDetector from \"i18next-browser-languagedetector\";\nimport I18NextXhrBackend from \"i18next-xhr-backend\";\n\nconst options = {\n  fallbackLng: \"it\",\n  debug: false,\n  interpolation: {\n    escapeValue: false\n  },\n  ns: [\"translation\"],\n  defaultNS: \"translation\",\n  backend: {\n    loadPath: \"locales/{{lng}}/{{ns}}.json\"\n  }\n};\n\ni18n\n  // load translation using xhr -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  .use(I18NextXhrBackend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(I18nextBrowserLanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  .init(options);\n\nexport default i18n;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./reducers\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// import i18n (needs to be bundled ;))\nimport \"./i18n\";\n\nconst composeEnhancers = composeWithDevTools({\n  // options like actionSanitizer, stateSanitizer\n});\n\nconst store = createStore(\n  reducer,\n  composeEnhancers(applyMiddleware(thunk))\n  // other store enhancers if any\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}